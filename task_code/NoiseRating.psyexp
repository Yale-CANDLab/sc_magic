<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="1.84.1">
  <Settings>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Data filename" updates="None" val="'/Users/ecohodes/Dropbox/sc/sc_output/NoiseRating/logs/%s_%s' % (expName, expInfo['date'])" valType="code"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Enable Escape" updates="None" val="False" valType="bool"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="Experiment info" updates="None" val="{u'participantID': u''}" valType="code"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="expName" updates="None" val="noise" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="use prefs" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="# Project directory (change this and the log directory declared&amp;#10;# &quot;Experiment Settings&quot; if moving to a new environment)&amp;#10;projectDir = '/Users/ecohodes/Dropbox/sc/'&amp;#10;&amp;#10;# path of folder containing the sounds&amp;#10;media = projectDir + 'sc_media/'&amp;#10;outputDir = projectDir + 'sc_output/NoiseRating/'&amp;#10;&amp;#10;# A and B are Psychopy placeholders for the netural sounds&amp;#10;soundsToRate = [media + 'chime.wav', media + 'Balloon_Pop.wav', media + 'SHAPES_USE.wav', media + 'egg_crack.wav']&amp;#10;&amp;#10;# slides that are cycled through for each sound to be rated&amp;#10;instructionSlide = media + 'Noise_Rating_Slides/InstructionSlide.jpg'&amp;#10;ratingSlide = media + 'Noise_Rating_Slides/RatingSlide.jpg'&amp;#10;fixationSlide = media + 'iti_background.jpg'&amp;#10;&amp;#10;# start off with the instruction slide and the first sound&amp;#10;currentSlide = instructionSlide&amp;#10;playSoundNow = False&amp;#10;&amp;#10;# valid participant ID&amp;#10;import re&amp;#10;pattern = '^[A-Za-z0-9][A-Za-z0-9_\-]*$'&amp;#10;if not re.search(pattern, expInfo['participantID']):&amp;#10;    print &quot;Error: Invalid or missing participant ID.&quot;&amp;#10;    print &quot;The participant ID must start with a letter or number, and it can only contain numbers, letters, hyphens, and underscores.&quot;&amp;#10;    core.quit()&amp;#10;&amp;#10;outputFile = outputDir + &quot;noise_ratings_%s.txt&quot; % expInfo['participantID']&amp;#10;f = open(outputFile, 'w')&amp;#10;f.write(&quot;Participant\tNoise\tRating\n&quot;)" valType="extendedCode"/>
        <Param name="name" updates="None" val="code" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="currentSound = soundsToRate.pop(0)" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="print &quot;Finished run!&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="if currentSlide == instructionSlide and event.getKeys('space'):&amp;#10;    currentSlide = fixationSlide&amp;#10;   &amp;#10;&amp;#10;elif currentSlide == fixationSlide:&amp;#10;    # if the sound hasn't been played, wait a short period and then play it&amp;#10;    if soundToRate.status != FINISHED:&amp;#10;        core.wait(0.5)&amp;#10;        playSoundNow = True&amp;#10;    # if the sound is finished playing, go to the next slide&amp;#10;    else:&amp;#10;        currentSlide = ratingSlide&amp;#10;        playSoundNow = False&amp;#10;&amp;#10;elif currentSlide == ratingSlide:&amp;#10;    keys = event.getKeys()&amp;#10;    try:&amp;#10;        rating = int(keys[0])&amp;#10;    except:&amp;#10;        pass&amp;#10;    else:&amp;#10;        f.write(&quot;%s\t%s\t%d\n&quot; %(expInfo['participantID'], currentSound, rating))&amp;#10;        currentSlide = instructionSlide&amp;#10;        continueRoutine = False&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
      </CodeComponent>
      <KeyboardComponent name="key_listener">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_listener" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="Slide">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Slide" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="image" updates="set every frame" val="$currentSlide" valType="str"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="code"/>
      </ImageComponent>
      <SoundComponent name="soundToRate">
        <Param name="sound" updates="set every repeat" val="$currentSound" valType="str"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
        <Param name="name" updates="None" val="soundToRate" valType="code"/>
        <Param name="stopVal" updates="constant" val="1" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="playSoundNow" valType="code"/>
      </SoundComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="sounds">
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="name" updates="None" val="sounds" valType="code"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="4" valType="code"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="Selected rows" updates="None" val="" valType="str"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="sounds"/>
  </Flow>
</PsychoPy2experiment>
