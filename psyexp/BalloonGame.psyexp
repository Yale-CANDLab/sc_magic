<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="1.85.2">
  <Settings>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="Experiment info" updates="None" val="{u'dont_use': u''}" valType="code"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Units" updates="None" val="norm" valType="str"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Enable Escape" updates="None" val="False" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="OSF Project ID" updates="None" val="" valType="str"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="False" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Data filename" updates="None" val="&quot;BalloonGame_%s&quot; % expInfo['date']" valType="code"/>
    <Param name="Show info dlg" updates="None" val="False" valType="bool"/>
    <Param name="expName" updates="None" val="balloon_game" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
  </Settings>
  <Routines>
    <Routine name="boring_instr">
      <CodeComponent name="break_logic2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="break_logic2" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="currentInstructionNumber = 1&amp;#10;if skip_instructions: continueRoutine = False" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="# all slides advance with a space&amp;#10;if event.getKeys('space'):&amp;#10;    currentInstructionNumber += 1&amp;#10;&amp;#10;if currentInstructionNumber == 11:&amp;#10;    break&amp;#10;&amp;#10;currentInstructionString = str(currentInstructionNumber)&amp;#10;if currentInstructionNumber &lt; 10:&amp;#10;    currentInstructionString = &quot;0&quot; + currentInstructionString&amp;#10;currentInstructionFile = boringInstructionSlides + &quot;Slide&quot; + currentInstructionString + &quot;.jpg&quot;&amp;#10;" valType="extendedCode"/>
      </CodeComponent>
      <ImageComponent name="instruction">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="instruction" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="set every frame" val="$currentInstructionFile" valType="str"/>
        <Param name="size" updates="constant" val="(screen_width, screen_height)" valType="code"/>
      </ImageComponent>
    </Routine>
    <Routine name="game_instr_2">
      <CodeComponent name="instuction_logic_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="instuction_logic_2" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="if skip_instructions: continueRoutine = False&amp;#10;currentInstructionNumber = 16&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="if event.getKeys(['space']):&amp;#10;    currentInstructionNumber += 1&amp;#10;&amp;#10;if currentInstructionNumber == 19:&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    currentInstructionString = str(currentInstructionNumber)&amp;#10;    if currentInstructionNumber &lt; 10:&amp;#10;        currentInstructionString = &quot;0&quot; + currentInstructionString&amp;#10;    currentInstructionFile = instructionSlides + &quot;Slide&quot; + currentInstructionString + &quot;.jpg&quot;&amp;#10;&amp;#10;" valType="extendedCode"/>
      </CodeComponent>
      <KeyboardComponent name="get_key_press_2">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="get_key_press_2" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="slides_2">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="slides_2" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="set every frame" val="$currentInstructionFile" valType="str"/>
        <Param name="size" updates="constant" val="(screen_width, screen_height)" valType="code"/>
      </ImageComponent>
    </Routine>
    <Routine name="game_instr">
      <CodeComponent name="instuction_logic">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="instuction_logic" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="if skip_instructions: continueRoutine = False&amp;#10;currentInstructionNumber = 1&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="# first slide stays for 2 seconds (although user can still skip forward with space bar if they try)&amp;#10;if (t &gt; 2 and currentInstructionNumber == 1):&amp;#10;    currentInstructionNumber += 1&amp;#10;&amp;#10;# most slides advance with the press of the space bar&amp;#10;if event.getKeys(['space']) and currentInstructionNumber in range(1, 11) + [15]: &amp;#10;    currentInstructionNumber += 1&amp;#10;if event.getKeys([left_key]) and currentInstructionNumber == 11:&amp;#10;    currentInstructionNumber += 1&amp;#10;if event.getKeys([right_key]) and currentInstructionNumber == 12:&amp;#10;    currentInstructionNumber += 1&amp;#10;if event.getKeys([down_key]) and currentInstructionNumber == 13:&amp;#10;    currentInstructionNumber += 1&amp;#10;if event.getKeys([up_key]) and currentInstructionNumber == 14:&amp;#10;    currentInstructionNumber += 1&amp;#10;&amp;#10;if currentInstructionNumber == 15:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;currentInstructionString = str(currentInstructionNumber)&amp;#10;if currentInstructionNumber &lt; 10:&amp;#10;    currentInstructionString = &quot;0&quot; + currentInstructionString&amp;#10;currentInstructionFile = instructionSlides + &quot;Slide&quot; + currentInstructionString + &quot;.jpg&quot;&amp;#10;&amp;#10;" valType="extendedCode"/>
      </CodeComponent>
      <KeyboardComponent name="get_key_press">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="get_key_press" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="slides">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="slides" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="set every frame" val="$currentInstructionFile" valType="str"/>
        <Param name="size" updates="constant" val="(screen_width, screen_height)" valType="code"/>
      </ImageComponent>
    </Routine>
    <Routine name="thanks">
      <ImageComponent name="Thankyo">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Thankyo" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="constant" val="$instructionSlides + &quot;Thank_you.jpg&quot;" valType="str"/>
        <Param name="size" updates="constant" val="(screen_width, screen_height)" valType="code"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_14">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_14" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="initialize">
      <CodeComponent name="init">
        <Param name="Begin Experiment" updates="constant" val="from optparse import OptionParser, SUPPRESS_HELP&amp;#10;from datetime import datetime&amp;#10;from subprocess import Popen, call&amp;#10;from random import shuffle&amp;#10;&amp;#10;# immediately reset the frame duration to a smoother value&amp;#10;ideal_fps = 40&amp;#10;psychopy_calculated_fps = round(expInfo['frameRate'])&amp;#10;if psychopy_calculated_fps &lt; ideal_fps:&amp;#10;    print &quot;Warning: Psychopy internally calculated a frame rate of %f fps.&quot; % psychopy_calculated_fps&amp;#10;    print &quot;The system might be having trouble maintaining the necessary framerate (%f fps).&quot; % ideal_fps&amp;#10;frameDur = 1.0 / ideal_fps # frameDur is the internal value that determines game speed&amp;#10;&amp;#10;# collect runtime options (can be supplied via command line, or the wrapper script can do it automatically)&amp;#10;parser = OptionParser()&amp;#10;parser.add_option(&quot;-s&quot;, &quot;--source&quot;, metavar=&quot;SOURCE_DIR&quot;, dest=&quot;source_dir&quot;, help=&quot;the local sc task directory&quot;)&amp;#10;parser.add_option(&quot;-i&quot;, &quot;--id&quot;, metavar=&quot;ID&quot;, dest=&quot;id&quot;, help=&quot;the participant ID&quot;)&amp;#10;parser.add_option(&quot;-o&quot;, &quot;--output&quot;, metavar=&quot;OUTPUT_DIR&quot;, dest=&quot;output_dir&quot;, help=&quot;the directory where output/logs should be saved&quot;)&amp;#10;parser.add_option(&quot;-y&quot;, &quot;--yoke_source&quot;, metavar=&quot;YOKE_SOURCE&quot;, dest=&quot;yoke_source&quot;, help=&quot;a yoking file to which the current participant should be yoked&quot;)&amp;#10;parser.add_option(&quot;-b&quot;, &quot;--boring_mode&quot;, action=&quot;store_true&quot;, dest=&quot;is_boring&quot;, help=&quot;invokes non-stress version of game&quot;)&amp;#10;parser.add_option(&quot;-B&quot;, &quot;--button_box&quot;, action=&quot;store_true&quot;, default=False, dest=&quot;button_box_mode&quot;, help=&quot;use button box input (1-4 instead of right, down, left, up)&quot;)&amp;#10;parser.add_option(&quot;-v&quot;, &quot;--version&quot;, metavar=&quot;VERSION&quot;, dest=&quot;version&quot;, help=SUPPRESS_HELP, default=&quot;unknown&quot;)&amp;#10;parser.add_option(&quot;--short-iti&quot;, action=&quot;store_true&quot;, default=False, dest=&quot;short_iti&quot;, help=&quot;use shortened inter-trial intervals (for test runs only)&quot;)&amp;#10;parser.add_option(&quot;--skip-instructions&quot;, action=&quot;store_true&quot;, default=False, dest=&quot;skip_instructions&quot;, help=&quot;skip instructions/practice slides (for test runs only)&quot;)&amp;#10;parser.add_option(&quot;--debug-trial&quot;, metavar=&quot;TRIAL_NUMBER&quot;, dest=&quot;debug_trial&quot;, help=&quot;test a specific trial and skip everything else&quot;)&amp;#10;(options, args) = parser.parse_args()&amp;#10;projectDir = options.source_dir&amp;#10;outputDir = options.output_dir&amp;#10;id = options.id&amp;#10;yokeSourceFile = options.yoke_source&amp;#10;boringMode = options.is_boring&amp;#10;version = options.version&amp;#10;button_box_mode = options.button_box_mode&amp;#10;&amp;#10;# these modes can be used during test runs for easier debugging&amp;#10;short_iti_mode = options.short_iti&amp;#10;skip_instructions = options.skip_instructions&amp;#10;trial_debug_requested = options.debug_trial&amp;#10;if trial_debug_requested:&amp;#10;    trial_debug_mode = True&amp;#10;    debug_trial = int(trial_debug_requested) # when not None, the option itself indicates trial to test&amp;#10;    skip_instructions = True&amp;#10;    short_iti_mode = True&amp;#10;else:&amp;#10;    trial_debug_mode = False&amp;#10;&amp;#10;if button_box_mode:&amp;#10;    down_key = &quot;1&quot; # green&amp;#10;    left_key = &quot;2&quot; # red&amp;#10;    up_key = &quot;3&quot; # blue&amp;#10;    right_key = &quot;4&quot; # yellow&amp;#10;else:&amp;#10;    right_key = &quot;right&quot;&amp;#10;    down_key = &quot;down&quot;&amp;#10;    left_key = &quot;left&quot;&amp;#10;    up_key = &quot;up&quot;&amp;#10;&amp;#10;if not projectDir or not outputDir or not id:&amp;#10;    parser.print_help()&amp;#10;    Popen(&quot;sleep 5; rm %s.log %s.psydat&quot; %(filename, filename), shell=True)&amp;#10;    sys.exit()&amp;#10;&amp;#10;logDir = outputDir + &quot;/logs&quot;&amp;#10;if not os.path.exists(logDir): os.mkdir(logDir)&amp;#10;&amp;#10;new_filename = &quot;%s/BalloonGame_%s_%s&quot; % (logDir, id, expInfo['date'])&amp;#10;call(&quot;mv %s* %s.log&quot; % (filename, new_filename), shell=True)&amp;#10;filename = new_filename&amp;#10;&amp;#10;# set variable to &quot;controllable_stress&quot;, &quot;uncontrollable_stress&quot;, or &quot;nonstressed&quot;&amp;#10;condition = &quot;unknown&quot;&amp;#10;if boringMode:&amp;#10;    condition = &quot;nonstressed&quot;&amp;#10;elif yokeSourceFile:&amp;#10;    condition = &quot;uncontrollable_stress&quot;&amp;#10;else:&amp;#10;    condition = &quot;controllable_stress&quot;&amp;#10;&amp;#10;&amp;#10;# folder that holds images and sounds used in the experiment&amp;#10;media = projectDir + &quot;/sc_media/&quot;&amp;#10;instructionSlides = media + &quot;Balloon_instruction_slides/&quot;&amp;#10;boringInstructionSlides = media + &quot;Balloon_nonstressed_instruction_slides/&quot;&amp;#10;&amp;#10;# setting up where to store output data&amp;#10;outputFile = &quot;%s/BalloonGame_%s_%s_data.txt&quot; % (outputDir, id, expInfo['date'])&amp;#10;f = open(outputFile, 'w')&amp;#10;&amp;#10;# setting up for unyoked participants (uncontrollable stress)&amp;#10;yokingOutputDir = outputDir + &quot;/yoking_files&quot;&amp;#10;isYokedParticipant = False&amp;#10;if yokeSourceFile:&amp;#10;    isYokedParticipant = True&amp;#10;    try:&amp;#10;        y = open(yokeSourceFile, 'r')&amp;#10;    except:&amp;#10;        print &quot;Error: Could not open yoke source file %s&quot; % yokeSourceFile&amp;#10;        core.quit()&amp;#10;else:&amp;#10;    yokingOutputFile = &quot;%s/BalloonGame_%s_%s_yoke.txt&quot; % (yokingOutputDir, id, expInfo['date'])&amp;#10;    try:&amp;#10;        y = open(yokingOutputFile, 'w')&amp;#10;    except:&amp;#10;        print &quot;Error: Could not create yoking file %s&quot; % yokingOutputFile&amp;#10;        core.quit()&amp;#10;&amp;#10;# turn on the non-stressed mode, if applicable&amp;#10;if (boringMode and not isYokedParticipant):&amp;#10;    print &quot;Error: Non-stressed (boring) condition was selected without a yoking source file being specified.&quot;&amp;#10;    core.quit()&amp;#10;&amp;#10;&amp;#10;# length of anticipatory period (before each trial starts)&amp;#10;anticipatoryPeriod = 4&amp;#10;&amp;#10;# length of time between trials (for MRI synching)&amp;#10;itiLength = 10&amp;#10;if short_iti_mode: itiLength = 1&amp;#10;&amp;#10;# distance wand moves per step (in pixels)&amp;#10;wand_step_size = 80&amp;#10;&amp;#10;# screen size (these values just reflect what is already set by Psychopy)&amp;#10;screen_width = 1440&amp;#10;screen_height = 900&amp;#10;" valType="extendedCode"/>
        <Param name="name" updates="None" val="init" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="print &quot;Finished the game!&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="wand_practice">
      <CodeComponent name="code_3">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="if skip_instructions: continueRoutine = False&amp;#10;wand_position = (0, 0)&amp;#10;practice_length = 20.0&amp;#10;rounded_seconds_remaining = practice_length&amp;#10;time_left.setText(str(int(rounded_seconds_remaining)))&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="# moving wand when arrow keys are clicked&amp;#10;new_wand_position = wand_position&amp;#10;if event.getKeys([right_key]):&amp;#10;    if wand_position[0] + wand.size[0]/2 + wand_step_size &lt; screen_width/2:&amp;#10;        new_wand_position = (wand_position[0] + wand_step_size, wand_position[1])&amp;#10;if event.getKeys([left_key]):&amp;#10;    if wand_position[0] - wand.size[0]/2 - wand_step_size &gt; -1 * screen_width/2: &amp;#10;        new_wand_position = (wand_position[0] - wand_step_size, wand_position[1])&amp;#10;if event.getKeys([up_key]):&amp;#10;    if wand_position[1] + wand.size[1]/2 + wand_step_size &lt; screen_height/2:&amp;#10;        new_wand_position = (wand_position[0], wand_position[1] + wand_step_size)&amp;#10;if event.getKeys([down_key]):&amp;#10;    if wand_position[1] - wand.size[1]/2 - wand_step_size &gt; -1 * screen_height/2:&amp;#10;        new_wand_position = (wand_position[0], wand_position[1] - wand_step_size)&amp;#10;&amp;#10;if wand_position != new_wand_position:&amp;#10;    wand_position = new_wand_position&amp;#10;&amp;#10;seconds_remaining = practice_length - t&amp;#10;if seconds_remaining &lt; rounded_seconds_remaining - 1:&amp;#10;    rounded_seconds_remaining -= 1&amp;#10;    time_left.setText(str(int(rounded_seconds_remaining)))&amp;#10;&amp;#10;if event.getKeys(&quot;escape&quot;):&amp;#10;    continueRoutine=False" valType="extendedCode"/>
      </CodeComponent>
      <ImageComponent name="magic_wand">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="magic_wand" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="20" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="set every frame" val="wand_position" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="image" updates="constant" val="$media + &quot;magic_wand.png&quot;" valType="str"/>
        <Param name="size" updates="constant" val="(80, 70)" valType="code"/>
      </ImageComponent>
      <TextComponent name="time_left">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="time_left" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="#053270" valType="str"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="stopVal" updates="constant" val="20" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(.9, -.8)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="balloons">
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;&amp;#10;# signals when the user has successfully halted the balloon&amp;#10;success = 0&amp;#10;&amp;#10;# time when trial ends (regardless of catching balloon)&amp;#10;endTrialTime = anticipatoryPeriod + 4.5&amp;#10;&amp;#10;# will be used to keep track of time after halting balloon&amp;#10;successClock = core.Clock()&amp;#10;&amp;#10;# Balloon's y-axis start position and y-axis speed are always the same&amp;#10;yStartPos = -screen_height/2 &amp;#10;ySpeed = 7&amp;#10;&amp;#10;&amp;#10;&amp;#10;# Define per-trial balloon starting x-position, x-speed (pixels/frame), and zigzag pattern&amp;#10;balloon_trajectory_info = [&amp;#10;    (-675, 7, [70, -145]),&amp;#10;    (-600, 0, []),&amp;#10;    (-575, 6, [-200, -500, 290]),&amp;#10;    (-575, -2, [-600, -400]),&amp;#10;    (-400, 9, [0, -360, 650, -500, 500]),&amp;#10;    (-400, 6, []),&amp;#10;    (-400, -7, [-575, 300]),&amp;#10;    (-360, 9, [0, -300, -150]),&amp;#10;    (-360, 6, [-75, -150, 150, -290]),&amp;#10;    (-360, 3, [-75]),&amp;#10;    (-350, -1, []),&amp;#10;    (-300, 7, [576, 432]),&amp;#10;    (-275, 7, [0, -575, -300]),&amp;#10;    (-250, 8, [-72, -144, -72]),&amp;#10;    (-225, 8, [-144, -504, 216]),&amp;#10;    (-150, 0, []),&amp;#10;    (125, -7, [0, 500, -140, 210, -430]),&amp;#10;    (200, -7, [0]),&amp;#10;    (225, -9, [0, 580, -215, 215, -500, 575]),&amp;#10;    (300, -5, [100, 200, -100]),&amp;#10;    (300, -9, [-575, 575, -575, 575]),&amp;#10;    (300, 2, []),&amp;#10;    (360, -6, [0, 430]),&amp;#10;    (360, -6, [75]),&amp;#10;    (360, 6, [510]),&amp;#10;    (450, -9, [390, 505, 450, 600, 500, 600, 550, 625]),&amp;#10;    (400, -6, [-580, -290, -325]),&amp;#10;    (400, -6, [140]),&amp;#10;    (650, -8, [150]),&amp;#10;    (650, 0, [])]&amp;#10;&amp;#10;&amp;#10;# will pull from balloon settings list in random order (unless testing trials)&amp;#10;balloon_trajectory_order = range(0, len(balloon_trajectory_info))&amp;#10;if not trial_debug_mode: shuffle(balloon_trajectory_order)&amp;#10;&amp;#10;&amp;#10;# log info&amp;#10;currentTrial = 0&amp;#10;totalPopped = 0&amp;#10;totalSaved = 0&amp;#10;&amp;#10;# write data file headers&amp;#10;f.write(&quot;# Version: %s\n&quot; % version)&amp;#10;f.write(&quot;# Condition: %s\n&quot; % condition)&amp;#10;if condition != &quot;controllable_stress&quot;:&amp;#10;    f.write(&quot;# Yoked to: %s\n&quot; % yokeSourceFile)&amp;#10;f.write(&quot;ID\tTime\tTrial\tRel_time\tX_balloon\tY_balloon\tX_wand\tY_wand\tkey_just_pressed\tvalid_key_press\t&quot; +&amp;#10;&quot;total_key_presses\ttotal_valid_key_presses\tjust_popped_balloon\tjust_saved_balloon\ttotal_popped\ttotal_saved\n&quot;)&amp;#10;&amp;#10;# write yoking file headers&amp;#10;if (not isYokedParticipant):&amp;#10;    y.write(&quot;ID\tTrial\tBalloon_saved\tSuccess_time\n&quot;)&amp;#10;else:&amp;#10;    y.readline() # skip header line&amp;#10;    previousParticipantOutcomes = y.readlines()&amp;#10;    if len(previousParticipantOutcomes) != 30:&amp;#10;        print &quot;Error: Yoking file &quot; + yokeSourceFile + &quot; doesn't appear to have one line per trial.&quot;&amp;#10;        core.quit()&amp;#10;&amp;#10;# volume of aversive pop (gets changed to 0 in nonstressed condition)&amp;#10;popVolume = 1&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="name" updates="None" val="code" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="# indicator variable to track if it's time to pop the balloon&amp;#10;timeToPop = 0&amp;#10;success = 0&amp;#10;startedTrial = 0&amp;#10;timeSinceSuccess = 0&amp;#10;&amp;#10;wand_position = (0, -.8 * screen_height/2)&amp;#10;balloonImage = media + &quot;pink_balloon.png&quot;&amp;#10;current_trajectory_index = balloon_trajectory_order.pop(0)&amp;#10;currentBalloonSettings = balloon_trajectory_info[current_trajectory_index]&amp;#10;print &quot;Using index %d in balloon trajectory list: &quot; % current_trajectory_index + str(currentBalloonSettings)&amp;#10;balloonPosition = (currentBalloonSettings[0], yStartPos)&amp;#10;balloonShift = (currentBalloonSettings[1], ySpeed)&amp;#10;zigs = currentBalloonSettings[2]&amp;#10;&amp;#10;if boringMode:&amp;#10;    popVolume = 0&amp;#10;&amp;#10;if isYokedParticipant:&amp;#10;    trialInfo = previousParticipantOutcomes.pop(0).rstrip().split(&quot;\t&quot;)&amp;#10;    print &quot;Using this line from yoke source file: &quot; + &quot;\t&quot;.join(trialInfo)&amp;#10;    balloonToBeSaved = False&amp;#10;    if trialInfo[-2] == &quot;1&quot;:&amp;#10;        balloonToBeSaved = True&amp;#10;&amp;#10;# log info&amp;#10;currentTrial += 1&amp;#10;totalKeyPresses = 0&amp;#10;totalValidKeyPresses = 0&amp;#10;justPoppedBalloon = 0&amp;#10;justSavedBalloon = 0&amp;#10;updateLog = 0&amp;#10;&amp;#10;counter.setText(&quot;Spells cast: %d&quot; % totalSaved)&amp;#10;&amp;#10;if trial_debug_mode:&amp;#10;    if currentTrial != debug_trial: &amp;#10;        continue&amp;#10;    else:&amp;#10;        print &quot;Testing trial %d now...&quot; % debug_trial&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# to make clear that start of next routine in loop is not immediate victory&amp;#10;balloon.pos[1] = 0" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="f.close()&amp;#10;y.close()" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="# initializing defaults for logs&amp;#10;keyJustPressed = '0'&amp;#10;validKeyPress = 'NA'&amp;#10;&amp;#10;&amp;#10;# moving wand when arrow keys are clicked during the main part of the trial&amp;#10;if startedTrial:&amp;#10;    new_wand_position = wand_position&amp;#10;    if event.getKeys([right_key]):&amp;#10;        updateLog = 1&amp;#10;        keyJustPressed = 'right'&amp;#10;        totalKeyPresses += 1&amp;#10;        validKeyPress = '0'&amp;#10;        if wand_position[0] + wand.size[0]/2 + wand_step_size &lt; screen_width/2:&amp;#10;            new_wand_position = (wand_position[0] + wand_step_size, wand_position[1])&amp;#10;            validKeyPress = '1'&amp;#10;            totalValidKeyPresses += 1&amp;#10;    elif event.getKeys([left_key]):&amp;#10;        updateLog = 1&amp;#10;        keyJustPressed = 'left'&amp;#10;        totalKeyPresses += 1&amp;#10;        validKeyPress = '0'&amp;#10;        if wand_position[0] - wand.size[0]/2 - wand_step_size &gt; -screen_width/2: &amp;#10;            new_wand_position = (wand_position[0] - wand_step_size, wand_position[1])&amp;#10;            validKeyPress = '1'&amp;#10;            totalValidKeyPresses += 1&amp;#10;    elif event.getKeys([up_key]):&amp;#10;        updateLog = 1&amp;#10;        keyJustPressed = 'up'&amp;#10;        totalKeyPresses += 1&amp;#10;        validKeyPress = '0'&amp;#10;        if wand_position[1] + wand.size[1]/2 + wand_step_size &lt; screen_height/2:&amp;#10;            new_wand_position = (wand_position[0], wand_position[1] + wand_step_size)&amp;#10;            validKeyPress = '1'&amp;#10;            totalValidKeyPresses += 1&amp;#10;    elif event.getKeys([down_key]):&amp;#10;        updateLog = 1&amp;#10;        keyJustPressed = 'down'&amp;#10;        totalKeyPresses += 1&amp;#10;        validKeyPress = '0'&amp;#10;        if wand_position[1] - wand.size[1]/2 - wand_step_size &gt; -screen_height/2:&amp;#10;            new_wand_position = (wand_position[0], wand_position[1] - wand_step_size)&amp;#10;            validKeyPress = '1'&amp;#10;            totalValidKeyPresses += 1&amp;#10;    else:&amp;#10;        keyJustPressed = ''.join(event.getKeys())&amp;#10;        if keyJustPressed != '':&amp;#10;            updateLog = 1&amp;#10;            validKeyPress = '0'&amp;#10;            totalKeyPresses += 1&amp;#10;    if wand_position != new_wand_position:&amp;#10;        wand_position = new_wand_position&amp;#10;&amp;#10;&amp;#10;# moving the balloon during the main part of the trial&amp;#10;if not timeToPop and startedTrial:&amp;#10;    balloonPosition = (balloon.pos[0] + balloonShift[0], balloon.pos[1] + balloonShift[1]) # starting just off screen&amp;#10;    # reverse x-speed whenever a &quot;zigzag line&quot; is crossed&amp;#10;    if len(zigs) &gt; 0:&amp;#10;        zig_line_position = zigs[0]&amp;#10;        # if within 6 pixels of zigzag line, x-speed reverses (+/- 6 means condition always triggers since max speed is 9)&amp;#10;        if abs(balloon.pos[0] - zig_line_position) &lt; 6:&amp;#10;            balloonShift = (-balloonShift[0], balloonShift[1])&amp;#10;            zigs.pop(0)&amp;#10;&amp;#10;# signaling when the main part of the trial has started&amp;#10;if t &gt; anticipatoryPeriod:&amp;#10;    startedTrial = 1&amp;#10;&amp;#10;# testing if the wand has reached the balloon&amp;#10;xDist = abs(wand.pos[0] + wand.size[0]/2 - (balloon.pos[0]))&amp;#10;yDist = abs(wand.pos[1] + wand.size[1]/2 - (balloon.pos[1] + balloon.size[1]/2))&amp;#10;&amp;#10;# if balloon reaches top, balloon will pop&amp;#10;if balloon.pos[1] &gt; .85 * screen_height/2 and success == 0:&amp;#10;    if timeToPop == 0:&amp;#10;        justPoppedBalloon = 1&amp;#10;        totalPopped += 1&amp;#10;        balloonImage = media + &quot;pop_1.png&quot;&amp;#10;        updateLog = 1&amp;#10;        magic_sound.status = FINISHED&amp;#10;        magic.status = FINISHED&amp;#10;        if not isYokedParticipant:&amp;#10;            yokingParams = [id, str(currentTrial), &quot;0&quot;, &quot;NA&quot;] # 0 means balloon not touched (and touching time is NA)&amp;#10;            y.write(&quot;\t&quot;.join(yokingParams + [&quot;\n&quot;]))&amp;#10;    else:&amp;#10;        justPoppedBalloon = 0&amp;#10;        core.wait(.2)&amp;#10;        balloonImage = media + &quot;pop_2.png&quot;&amp;#10;    timeToPop = 1&amp;#10;elif (t &gt; anticipatoryPeriod + .2 and xDist &lt; 40 and yDist &lt; 40):&amp;#10;    # note that you need the .2 second buffer to guarantee objects are initialized before the test&amp;#10;    if success == 0:&amp;#10;        successClock.reset()&amp;#10;        justSavedBalloon = 1&amp;#10;        totalSaved += 1&amp;#10;        updateLog = 1&amp;#10;        if not isYokedParticipant:&amp;#10;            yokingParams = [id, str(currentTrial), str(justSavedBalloon), str(t)]&amp;#10;            y.write(&quot;\t&quot;.join(yokingParams + [&quot;\n&quot;]))&amp;#10;        counter.setText(&quot;Spells cast: %d&quot; % totalSaved)&amp;#10;    else:&amp;#10;        justSavedBalloon = 0&amp;#10;    success = 1&amp;#10;    if not isYokedParticipant: aversive_pop.status = FINISHED&amp;#10;&amp;#10;if (success):&amp;#10;    timeSinceSuccess = successClock.getTime()&amp;#10;&amp;#10;# logging&amp;#10;logInfo = [id, str(datetime.now()), str(currentTrial), str(t), str(balloon.pos[0]), str(balloon.pos[1]), &amp;#10;    str(wand.pos[0]), str(wand.pos[1]), keyJustPressed, validKeyPress, str(totalKeyPresses), str(totalValidKeyPresses), &amp;#10;    str(justPoppedBalloon), str(justSavedBalloon), str(totalPopped), str(totalSaved)]&amp;#10;&amp;#10;if updateLog == 1:&amp;#10;    f.write(&quot;\t&quot;.join(logInfo + [&quot;\n&quot;]))&amp;#10;    updateLog = 0" valType="extendedCode"/>
      </CodeComponent>
      <ImageComponent name="antic_background">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="antic_background" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="anticipatoryPeriod" valType="code"/>
        <Param name="durationEstim" updates="None" val="4" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="set every repeat" val="$media + &quot;Anticipatory_period_background.jpg&quot;" valType="str"/>
        <Param name="size" updates="constant" val="(screen_width, screen_height)" valType="code"/>
      </ImageComponent>
      <ImageComponent name="avoid_background">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="avoid_background" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="t&gt;=endTrialTime" valType="code"/>
        <Param name="durationEstim" updates="None" val="4.5" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="t &gt;= anticipatoryPeriod" valType="code"/>
        <Param name="image" updates="constant" val="$media + &quot;Avoidance_period_background.jpg&quot;" valType="str"/>
        <Param name="size" updates="constant" val="(screen_width, screen_height)" valType="code"/>
      </ImageComponent>
      <ImageComponent name="balloon">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="balloon" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="t&gt;=endTrialTime" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="set every frame" val="balloonPosition" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="45" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="t&gt;=anticipatoryPeriod" valType="code"/>
        <Param name="image" updates="set every frame" val="$balloonImage" valType="str"/>
        <Param name="size" updates="set every frame" val="(120, 150)" valType="code"/>
      </ImageComponent>
      <ImageComponent name="wand">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="wand" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="timeToPop or t&gt;endTrialTime" valType="code"/>
        <Param name="durationEstim" updates="None" val="4" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="set every frame" val="wand_position" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="t&gt;=anticipatoryPeriod" valType="code"/>
        <Param name="image" updates="constant" val="$media + &quot;magic_wand.png&quot;" valType="str"/>
        <Param name="size" updates="constant" val="(80, 70)" valType="code"/>
      </ImageComponent>
      <SoundComponent name="aversive_pop">
        <Param name="sound" updates="constant" val="$media + &quot;Balloon_Pop.wav&quot;" valType="str"/>
        <Param name="volume" updates="set every repeat" val="$popVolume" valType="code"/>
        <Param name="name" updates="None" val="aversive_pop" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="timeToPop and not success" valType="code"/>
      </SoundComponent>
      <ImageComponent name="ITI">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="ITI" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="itiLength" valType="code"/>
        <Param name="durationEstim" updates="None" val="10" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="8" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="t &gt;= endTrialTime" valType="code"/>
        <Param name="image" updates="constant" val="$media + &quot;iti_background.jpg&quot;" valType="str"/>
        <Param name="size" updates="constant" val="(screen_width, screen_height)" valType="code"/>
      </ImageComponent>
      <ImageComponent name="counter_background">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="counter_background" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="t &gt; endTrialTime" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(550, -435)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="constant" val="$media + &quot;label_background.png&quot;" valType="str"/>
        <Param name="size" updates="constant" val="(175, 45)" valType="code"/>
      </ImageComponent>
      <TextComponent name="counter">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="counter" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="#053270" valType="str"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="stopVal" updates="constant" val="t &gt;= endTrialTime" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(550, -432)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="letterHeight" updates="constant" val="24" valType="code"/>
      </TextComponent>
      <ImageComponent name="magic">
        <Param name="opacity" updates="constant" val=".75" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="magic" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="set every frame" val="(balloon.pos[0] + 20, balloon.pos[1] + 50)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="justSavedBalloon == 1" valType="code"/>
        <Param name="image" updates="constant" val="$media + &quot;magic-effect.png&quot;" valType="str"/>
        <Param name="size" updates="constant" val="(150, 150)" valType="code"/>
      </ImageComponent>
      <SoundComponent name="magic_sound">
        <Param name="sound" updates="constant" val="$media + &quot;magic-sound-trimmed.wav&quot;" valType="str"/>
        <Param name="volume" updates="constant" val=".5" valType="code"/>
        <Param name="name" updates="None" val="magic_sound" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="justSavedBalloon == 1" valType="code"/>
      </SoundComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="initialize"/>
    <Routine name="game_instr"/>
    <Routine name="wand_practice"/>
    <Routine name="game_instr_2"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="30" valType="code"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="Selected rows" updates="None" val="" valType="str"/>
    </LoopInitiator>
    <Routine name="balloons"/>
    <LoopTerminator name="trials"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>
